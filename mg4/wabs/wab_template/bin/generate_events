#!/bin/bash
#
#  This runs survey,refine,unweight_events, one after the other
#  
#  Usage: generate_events run energy
#

# Check that the required parameters are passed at the command line
if [ "$#" -lt 2 ]; then
  echo 'Usage: generate_events run energy (in GeV)' 
  echo '   optional: min_e theta_y'
  echo '     min_e: Minimum energy of the WAB in GeV'
  echo '     theta_y: Minimum opening angle in y rad'
  echo 'Note: To specify theta_y, min_e must also be specified.'
  exit
fi

#   First we need to get into the main directory
if [[  ! -d ./bin  ]]; then
    cd ../
    if [[ ! -d ./bin ]]; then
        echo "Error: it must be executed from the main, or bin directory"
        exit
    fi
fi

#
#  Now let shell know where to find important executables
#
main=`pwd`
dirbin=$main/bin
td=$main/../td
cards=$main/Cards

# Set the energy based on the argument passed
echo "Running at an energy of $2 GeV"
cp  $cards/run_card.dat.tpl $cards/run_card.dat 
sed -i "s/{beam_energy}/$2/" $cards/run_card.dat

# Set the minimum energy cut.
min_e=0
if [ -z "$3" ]; then
case $2 in
  1.056) min_e=0.20;;
  2.2) min_e=0.40;;
  2.3) min_e=0.40;;
  3.7) min_e=0.640;;
  4.4) min_e=0.50;;
  4.55) min_e=0.80;;
  *) min_e=0;;
esac
else
  min_e=$3
fi

echo "The minimum energy cut is set of $min_e GeV"
sed -i "s/{min_e}/$min_e/" $cards/run_card.dat

theta_y=0.005
if [ -n "$4" ]; then
  theta_y=$4
fi
echo "The minimum opening angle is set to $theta_y rad"
sed -i "s/{theta_y}/$theta_y/" $cards/run_card.dat

# Get the run number. This will also be used as the seed.
run=$1
echo r=$1 > $main/SubProcesses/randinit

echo $$ >> myprocid

# Set the job to run in serial i.e. p = 0.
# To run the job in parallel, p is set to 1. 
p=0
n=MadEvent

# Set the job name
t=wabs_$run

# Extract the number of events to run
a=`awk '/^.*=.*nevents/{print $1}' Cards/run_card.dat`
energy=`awk '/^.*=.*ebeam1/{print $1}' Cards/run_card.dat`
echo Generating $a events using a beam energy of $energy GeV

#
#  Check if run already exists. If so, store run w/ new name
#  and remove old run before starting.
#
if [[  -e status  ]]; then
  rm status
fi
if [[  -e error  ]]; then
  rm error
fi

touch RunWeb

echo "Cleaning directories" > status
$dirbin/gen_crossxhtml-pl $t
$dirbin/clean
touch survey

echo "Starting jobs" > status
$dirbin/gen_crossxhtml-pl $t
$dirbin/survey $p $n $t
if [[  -e error  ]]; then
  cat error
  date
  cp -f error status
  rm survey
  rm RunWeb
  $dirbin/gen_crossxhtml-pl $t
  $dirbin/gen_cardhtml-pl
  exit
fi
if [[ $b != ".true." ]]; then
   mv survey refine
   $dirbin/refine $a $p $n 5 $t
   #$dirbin/refine 0.01 $p $n
   mv refine refine2
   $dirbin/refine $a $p $n 1 $t
   rm -f refine2
else
   rm survey
fi

#
#  Now collect the events
#
echo "Combining Events" >& status
echo "Combining Events" 
$dirbin/gen_crossxhtml-pl $t
pushd ./Source > /dev/null
make ../bin/combine_events
popd > /dev/null
pushd SubProcesses > /dev/null
$dirbin/run_combine $p
mv events.lhe ../Events/
mv unweighted_events.lhe ../Events/
#$dirbin/addvertex.pl unweighted_events.lhe unweighted_events_V.lhe 622 1.0
#rm unweighted_events.lhe
#mv unweighted_events_V.lhe ../Events/unweighted_events.lhe
popd > /dev/null
#
#  do the banner
#
cd ./Events
echo "putting the banner"
$dirbin/put_banner events.lhe
$dirbin/put_banner unweighted_events.lhe

$dirbin/store $t
$dirbin/gen_crossxhtml-pl $t

cd ../
#
#  Store Events
#
echo "Storing Events" >& status
$dirbin/gen_crossxhtml-pl $t
$dirbin/store $t
rm -f RunWeb
echo " " >& status
$dirbin/gen_crossxhtml-pl $t
$dirbin/gen_cardhtml-pl

